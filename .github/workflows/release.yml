name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24.4'
  NODE_VERSION: '22.15.0'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: JetKVM ${{ steps.version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ## JetKVM ${{ steps.version.outputs.version }}
            
            ### Multi-Architecture Support
            This release includes binaries for both ARM (original JetKVM hardware) and X86_64 (software-based) architectures.
            
            ### Downloads
            - **X86_64 (Linux)**: `jetkvm-${{ steps.version.outputs.version }}-linux-amd64`
            - **ARM (JetKVM Hardware)**: `jetkvm-${{ steps.version.outputs.version }}-linux-arm`
            - **Docker Image**: `ghcr.io/${{ github.repository }}-x86_64:${{ steps.version.outputs.version }}`
            
            ### Quick Start
            
            #### X86_64 (Development/Testing)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/jetkvm-${{ steps.version.outputs.version }}-linux-amd64
            chmod +x jetkvm-${{ steps.version.outputs.version }}-linux-amd64
            ./jetkvm-${{ steps.version.outputs.version }}-linux-amd64
            ```
            
            #### Docker (X86_64)
            ```bash
            docker run -p 8080:8080 ghcr.io/${{ github.repository }}-x86_64:${{ steps.version.outputs.version }}
            ```
            
            ### Documentation
            - [X86_64 Support Guide](README_X86.md)
            - [Development Guide](DEVELOPMENT.md)
            
            ### Changes
            <!-- Add changelog here -->

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        include:
          - arch: x86_64
            goos: linux
            goarch: amd64
            cgo: 0
          - arch: arm
            goos: linux
            goarch: arm
            goarm: 7
            cgo: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Build frontend
        run: |
          cd ui
          npm ci
          npm run build:device

      - name: Build binary - X86_64
        if: matrix.arch == 'x86_64'
        run: |
          export TARGET_ARCH=x86_64
          make build_release TARGET_ARCH=x86_64 SKIP_NATIVE_IF_EXISTS=1 SKIP_UI_BUILD=1

      - name: Build binary - ARM (Docker)
        if: matrix.arch == 'arm'
        run: |
          export TARGET_ARCH=arm
          export BUILD_IN_DOCKER=true
          source ./scripts/build_utils.sh
          build_docker_image
          do_make build_release SKIP_NATIVE_IF_EXISTS=1 SKIP_UI_BUILD=1

      - name: Prepare binary
        run: |
          mkdir -p dist
          cp bin/jetkvm_app dist/jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}
          
          # Create checksum
          cd dist
          sha256sum jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }} > jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}.sha256

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: dist/jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}
          asset_name: jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: dist/jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}.sha256
          asset_name: jetkvm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.arch }}.sha256
          asset_content_type: text/plain

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [prepare-release, build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Build frontend
        run: |
          cd ui
          npm ci
          npm run build:device

      - name: Build X86_64 binary
        run: |
          export TARGET_ARCH=x86_64
          make build_release TARGET_ARCH=x86_64 SKIP_NATIVE_IF_EXISTS=1 SKIP_UI_BUILD=1

      - name: Create Dockerfile
        run: |
          cat > Dockerfile.release << 'EOF'
          FROM ubuntu:22.04
          
          RUN apt-get update && apt-get install -y \
              ca-certificates \
              curl \
              && rm -rf /var/lib/apt/lists/*
          
          # Create non-root user
          RUN useradd -r -s /bin/false jetkvm
          
          COPY bin/jetkvm_app /usr/local/bin/jetkvm_app
          COPY static/ /app/static/
          COPY config_x86_example.json /app/config.json
          
          RUN chmod +x /usr/local/bin/jetkvm_app && \
              chown -R jetkvm:jetkvm /app
          
          WORKDIR /app
          USER jetkvm
          
          EXPOSE 8080
          
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8080/health || exit 1
          
          CMD ["/usr/local/bin/jetkvm_app"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.release
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-x86_64:latest
            ghcr.io/${{ github.repository }}-x86_64:${{ needs.prepare-release.outputs.version }}
          labels: |
            org.opencontainers.image.title=JetKVM X86_64
            org.opencontainers.image.description=JetKVM software-based KVM solution for X86_64
            org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-binaries, build-docker]
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = "${{ needs.prepare-release.outputs.version }}";
            
            // Get the release
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
            });
            
            const release = releases.data.find(r => r.tag_name === tag);
            
            if (release) {
              // Update the release to published
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.id,
                draft: false,
              });
              
              console.log(`Release ${tag} published successfully!`);
            }