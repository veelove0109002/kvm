name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd ui
          npm ci

      - name: Build frontend
        run: |
          cd ui
          npm run build:device

      - name: Check build output
        run: |
          ls -la static/ || echo "No static directory found"
          ls -la ui/dist/ || echo "No ui/dist directory found"
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: static/
          if-no-files-found: warn

  build-binaries:
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            go-arch: amd64
            name: jetkvm-x86_64-linux
          - arch: arm
            go-arch: arm
            name: jetkvm-arm-linux
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: static/
        continue-on-error: true
      
      - name: Check frontend artifacts
        run: |
          echo "Checking frontend artifacts..."
          ls -la static/ || echo "No static directory found"
          if [ -f "static/index.html" ]; then
            echo "‚úÖ Frontend artifacts found - index.html exists"
            echo "Frontend files:"
            find static/ -type f | head -10
          else
            echo "‚ùå Frontend artifacts missing - index.html not found"
            echo "This will cause the web interface to not work properly"
          fi

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libdrm-dev python3-pip
          pip3 install kconfiglib

      - name: Install ARM toolchain (for ARM builds)
        if: matrix.arch == 'arm'
        run: |
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          # Create a minimal toolchain file for ARM cross-compilation
          sudo mkdir -p /opt/jetkvm-native-buildkit
          cat > /tmp/rv1106-jetkvm-v2.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR arm)
          set(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
          set(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          sudo mv /tmp/rv1106-jetkvm-v2.cmake /opt/jetkvm-native-buildkit/

      - name: Build binary
        run: |
          export TARGET_ARCH=${{ matrix.arch }}
          echo "Building for architecture: ${{ matrix.arch }}"
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "üîß Building X86_64 binary..."
            
            # Check if frontend artifacts are available
            if [ -f "static/index.html" ]; then
              echo "‚úÖ Frontend artifacts found, building with UI support"
              echo "Static files that will be embedded:"
              find static/ -type f | wc -l | xargs echo "Total files:"
            else
              echo "‚ö†Ô∏è  No frontend artifacts found, building without UI"
              echo "Web interface will not work properly!"
            fi
            
            make build_release TARGET_ARCH=x86_64 SKIP_NATIVE_IF_EXISTS=1 SKIP_UI_BUILD=1
          else
            # For ARM, use simplified build without native dependencies
            echo "üîß Building ARM binary with simplified approach..."
            ./scripts/build_arm_simple.sh
          fi

      - name: Rename binary
        run: |
          mv bin/jetkvm_app bin/${{ matrix.name }}
          chmod +x bin/${{ matrix.name }}

      - name: Generate checksums
        run: |
          cd bin
          sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            bin/${{ matrix.name }}
            bin/${{ matrix.name }}.sha256

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release/
          find artifacts/ -name "jetkvm-*" -type f -exec cp {} release/ \;
          ls -la release/

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: JetKVM ${{ steps.tag.outputs.tag }}
          body: |
            ## JetKVM Release ${{ steps.tag.outputs.tag }}
            
            ### üöÄ Multi-Architecture Support
            This release includes binaries for both ARM and X86_64 architectures:
            
            - **jetkvm-arm-linux**: For ARM devices (Rockchip RV1106, original hardware)
            - **jetkvm-x86_64-linux**: For X86_64 devices (software simulation)
            
            ### üì¶ Downloads
            - Download the appropriate binary for your architecture
            - Verify checksums using the provided `.sha256` files
            
            ### üîß Usage
            ```bash
            # Make executable
            chmod +x jetkvm-*-linux
            
            # Run
            ./jetkvm-*-linux
            ```
            
            ### üÜï What's New
            - Multi-architecture support (ARM + X86_64)
            - Software KVM simulation for X86_64
            - Improved build system and CI/CD
            - Complete mock implementations for development
            
            ### üìã System Requirements
            **ARM Linux (Hardware KVM):**
            - Rockchip RV1106 or compatible ARM device
            - Linux kernel with KVM support
            - Hardware video capture capabilities
            
            **X86_64 Linux (Software KVM):**
            - Any X86_64 Linux system
            - Suitable for development, testing, and demonstration
            - Mock implementations for all hardware functions
            
            ### üêõ Known Issues
            - X86_64 version provides software simulation only
            - Some hardware-specific features are mocked on X86_64
            
            ### üìö Documentation
            - [X86_64 Setup Guide](README_X86.md)
            - [Build Instructions](BUILD_FIXES_X86.md)
            - [Implementation Changelog](CHANGELOG_X86.md)
          draft: false
          prerelease: false

      - name: Upload ARM Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/jetkvm-arm-linux
          asset_name: jetkvm-arm-linux
          asset_content_type: application/octet-stream

      - name: Upload ARM Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/jetkvm-arm-linux.sha256
          asset_name: jetkvm-arm-linux.sha256
          asset_content_type: text/plain

      - name: Upload X86_64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/jetkvm-x86_64-linux
          asset_name: jetkvm-x86_64-linux
          asset_content_type: application/octet-stream

      - name: Upload X86_64 Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/jetkvm-x86_64-linux.sha256
          asset_name: jetkvm-x86_64-linux.sha256
          asset_content_type: text/plain